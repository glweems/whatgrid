// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateGrid {
  count: Int!
}

type AggregateGridEntry {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Grid {
  id: ID!
  name: String!
  entries(where: GridEntryWhereInput, orderBy: GridEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GridEntry!]
  author: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GridConnection {
  pageInfo: PageInfo!
  edges: [GridEdge]!
  aggregate: AggregateGrid!
}

input GridCreateInput {
  id: ID
  name: String!
  entries: GridEntryCreateManyWithoutGridInput
  author: UserCreateOneWithoutGridsInput
}

input GridCreateManyWithoutAuthorInput {
  create: [GridCreateWithoutAuthorInput!]
  connect: [GridWhereUniqueInput!]
}

input GridCreateOneWithoutEntriesInput {
  create: GridCreateWithoutEntriesInput
  connect: GridWhereUniqueInput
}

input GridCreateWithoutAuthorInput {
  id: ID
  name: String!
  entries: GridEntryCreateManyWithoutGridInput
}

input GridCreateWithoutEntriesInput {
  id: ID
  name: String!
  author: UserCreateOneWithoutGridsInput
}

type GridEdge {
  node: Grid!
  cursor: String!
}

type GridEntry {
  id: ID!
  type: GridEntryType!
  amount: String!
  unit: String!
  grid: Grid!
  author: User!
}

type GridEntryConnection {
  pageInfo: PageInfo!
  edges: [GridEntryEdge]!
  aggregate: AggregateGridEntry!
}

input GridEntryCreateInput {
  id: ID
  type: GridEntryType!
  amount: String!
  unit: String!
  grid: GridCreateOneWithoutEntriesInput!
  author: UserCreateOneWithoutGridEntriesInput!
}

input GridEntryCreateManyWithoutAuthorInput {
  create: [GridEntryCreateWithoutAuthorInput!]
  connect: [GridEntryWhereUniqueInput!]
}

input GridEntryCreateManyWithoutGridInput {
  create: [GridEntryCreateWithoutGridInput!]
  connect: [GridEntryWhereUniqueInput!]
}

input GridEntryCreateWithoutAuthorInput {
  id: ID
  type: GridEntryType!
  amount: String!
  unit: String!
  grid: GridCreateOneWithoutEntriesInput!
}

input GridEntryCreateWithoutGridInput {
  id: ID
  type: GridEntryType!
  amount: String!
  unit: String!
  author: UserCreateOneWithoutGridEntriesInput!
}

type GridEntryEdge {
  node: GridEntry!
  cursor: String!
}

enum GridEntryOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  amount_ASC
  amount_DESC
  unit_ASC
  unit_DESC
}

type GridEntryPreviousValues {
  id: ID!
  type: GridEntryType!
  amount: String!
  unit: String!
}

input GridEntryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: GridEntryType
  type_not: GridEntryType
  type_in: [GridEntryType!]
  type_not_in: [GridEntryType!]
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  AND: [GridEntryScalarWhereInput!]
  OR: [GridEntryScalarWhereInput!]
  NOT: [GridEntryScalarWhereInput!]
}

type GridEntrySubscriptionPayload {
  mutation: MutationType!
  node: GridEntry
  updatedFields: [String!]
  previousValues: GridEntryPreviousValues
}

input GridEntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GridEntryWhereInput
  AND: [GridEntrySubscriptionWhereInput!]
  OR: [GridEntrySubscriptionWhereInput!]
  NOT: [GridEntrySubscriptionWhereInput!]
}

enum GridEntryType {
  Column
  Row
}

input GridEntryUpdateInput {
  type: GridEntryType
  amount: String
  unit: String
  grid: GridUpdateOneRequiredWithoutEntriesInput
  author: UserUpdateOneRequiredWithoutGridEntriesInput
}

input GridEntryUpdateManyDataInput {
  type: GridEntryType
  amount: String
  unit: String
}

input GridEntryUpdateManyMutationInput {
  type: GridEntryType
  amount: String
  unit: String
}

input GridEntryUpdateManyWithoutAuthorInput {
  create: [GridEntryCreateWithoutAuthorInput!]
  delete: [GridEntryWhereUniqueInput!]
  connect: [GridEntryWhereUniqueInput!]
  set: [GridEntryWhereUniqueInput!]
  disconnect: [GridEntryWhereUniqueInput!]
  update: [GridEntryUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [GridEntryUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [GridEntryScalarWhereInput!]
  updateMany: [GridEntryUpdateManyWithWhereNestedInput!]
}

input GridEntryUpdateManyWithoutGridInput {
  create: [GridEntryCreateWithoutGridInput!]
  delete: [GridEntryWhereUniqueInput!]
  connect: [GridEntryWhereUniqueInput!]
  set: [GridEntryWhereUniqueInput!]
  disconnect: [GridEntryWhereUniqueInput!]
  update: [GridEntryUpdateWithWhereUniqueWithoutGridInput!]
  upsert: [GridEntryUpsertWithWhereUniqueWithoutGridInput!]
  deleteMany: [GridEntryScalarWhereInput!]
  updateMany: [GridEntryUpdateManyWithWhereNestedInput!]
}

input GridEntryUpdateManyWithWhereNestedInput {
  where: GridEntryScalarWhereInput!
  data: GridEntryUpdateManyDataInput!
}

input GridEntryUpdateWithoutAuthorDataInput {
  type: GridEntryType
  amount: String
  unit: String
  grid: GridUpdateOneRequiredWithoutEntriesInput
}

input GridEntryUpdateWithoutGridDataInput {
  type: GridEntryType
  amount: String
  unit: String
  author: UserUpdateOneRequiredWithoutGridEntriesInput
}

input GridEntryUpdateWithWhereUniqueWithoutAuthorInput {
  where: GridEntryWhereUniqueInput!
  data: GridEntryUpdateWithoutAuthorDataInput!
}

input GridEntryUpdateWithWhereUniqueWithoutGridInput {
  where: GridEntryWhereUniqueInput!
  data: GridEntryUpdateWithoutGridDataInput!
}

input GridEntryUpsertWithWhereUniqueWithoutAuthorInput {
  where: GridEntryWhereUniqueInput!
  update: GridEntryUpdateWithoutAuthorDataInput!
  create: GridEntryCreateWithoutAuthorInput!
}

input GridEntryUpsertWithWhereUniqueWithoutGridInput {
  where: GridEntryWhereUniqueInput!
  update: GridEntryUpdateWithoutGridDataInput!
  create: GridEntryCreateWithoutGridInput!
}

input GridEntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: GridEntryType
  type_not: GridEntryType
  type_in: [GridEntryType!]
  type_not_in: [GridEntryType!]
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  grid: GridWhereInput
  author: UserWhereInput
  AND: [GridEntryWhereInput!]
  OR: [GridEntryWhereInput!]
  NOT: [GridEntryWhereInput!]
}

input GridEntryWhereUniqueInput {
  id: ID
}

enum GridOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GridPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GridScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GridScalarWhereInput!]
  OR: [GridScalarWhereInput!]
  NOT: [GridScalarWhereInput!]
}

type GridSubscriptionPayload {
  mutation: MutationType!
  node: Grid
  updatedFields: [String!]
  previousValues: GridPreviousValues
}

input GridSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GridWhereInput
  AND: [GridSubscriptionWhereInput!]
  OR: [GridSubscriptionWhereInput!]
  NOT: [GridSubscriptionWhereInput!]
}

input GridUpdateInput {
  name: String
  entries: GridEntryUpdateManyWithoutGridInput
  author: UserUpdateOneWithoutGridsInput
}

input GridUpdateManyDataInput {
  name: String
}

input GridUpdateManyMutationInput {
  name: String
}

input GridUpdateManyWithoutAuthorInput {
  create: [GridCreateWithoutAuthorInput!]
  delete: [GridWhereUniqueInput!]
  connect: [GridWhereUniqueInput!]
  set: [GridWhereUniqueInput!]
  disconnect: [GridWhereUniqueInput!]
  update: [GridUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [GridUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [GridScalarWhereInput!]
  updateMany: [GridUpdateManyWithWhereNestedInput!]
}

input GridUpdateManyWithWhereNestedInput {
  where: GridScalarWhereInput!
  data: GridUpdateManyDataInput!
}

input GridUpdateOneRequiredWithoutEntriesInput {
  create: GridCreateWithoutEntriesInput
  update: GridUpdateWithoutEntriesDataInput
  upsert: GridUpsertWithoutEntriesInput
  connect: GridWhereUniqueInput
}

input GridUpdateWithoutAuthorDataInput {
  name: String
  entries: GridEntryUpdateManyWithoutGridInput
}

input GridUpdateWithoutEntriesDataInput {
  name: String
  author: UserUpdateOneWithoutGridsInput
}

input GridUpdateWithWhereUniqueWithoutAuthorInput {
  where: GridWhereUniqueInput!
  data: GridUpdateWithoutAuthorDataInput!
}

input GridUpsertWithoutEntriesInput {
  update: GridUpdateWithoutEntriesDataInput!
  create: GridCreateWithoutEntriesInput!
}

input GridUpsertWithWhereUniqueWithoutAuthorInput {
  where: GridWhereUniqueInput!
  update: GridUpdateWithoutAuthorDataInput!
  create: GridCreateWithoutAuthorInput!
}

input GridWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  entries_every: GridEntryWhereInput
  entries_some: GridEntryWhereInput
  entries_none: GridEntryWhereInput
  author: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GridWhereInput!]
  OR: [GridWhereInput!]
  NOT: [GridWhereInput!]
}

input GridWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGrid(data: GridCreateInput!): Grid!
  updateGrid(data: GridUpdateInput!, where: GridWhereUniqueInput!): Grid
  updateManyGrids(data: GridUpdateManyMutationInput!, where: GridWhereInput): BatchPayload!
  upsertGrid(where: GridWhereUniqueInput!, create: GridCreateInput!, update: GridUpdateInput!): Grid!
  deleteGrid(where: GridWhereUniqueInput!): Grid
  deleteManyGrids(where: GridWhereInput): BatchPayload!
  createGridEntry(data: GridEntryCreateInput!): GridEntry!
  updateGridEntry(data: GridEntryUpdateInput!, where: GridEntryWhereUniqueInput!): GridEntry
  updateManyGridEntries(data: GridEntryUpdateManyMutationInput!, where: GridEntryWhereInput): BatchPayload!
  upsertGridEntry(where: GridEntryWhereUniqueInput!, create: GridEntryCreateInput!, update: GridEntryUpdateInput!): GridEntry!
  deleteGridEntry(where: GridEntryWhereUniqueInput!): GridEntry
  deleteManyGridEntries(where: GridEntryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  grid(where: GridWhereUniqueInput!): Grid
  grids(where: GridWhereInput, orderBy: GridOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Grid]!
  gridsConnection(where: GridWhereInput, orderBy: GridOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GridConnection!
  gridEntry(where: GridEntryWhereUniqueInput!): GridEntry
  gridEntries(where: GridEntryWhereInput, orderBy: GridEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GridEntry]!
  gridEntriesConnection(where: GridEntryWhereInput, orderBy: GridEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GridEntryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  grid(where: GridSubscriptionWhereInput): GridSubscriptionPayload
  gridEntry(where: GridEntrySubscriptionWhereInput): GridEntrySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  phoneNumber: String
  grids(where: GridWhereInput, orderBy: GridOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Grid!]
  GridEntries(where: GridEntryWhereInput, orderBy: GridEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GridEntry!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  phoneNumber: String
  grids: GridCreateManyWithoutAuthorInput
  GridEntries: GridEntryCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutGridEntriesInput {
  create: UserCreateWithoutGridEntriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGridsInput {
  create: UserCreateWithoutGridsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGridEntriesInput {
  id: ID
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  phoneNumber: String
  grids: GridCreateManyWithoutAuthorInput
}

input UserCreateWithoutGridsInput {
  id: ID
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  phoneNumber: String
  GridEntries: GridEntryCreateManyWithoutAuthorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  phoneNumber_ASC
  phoneNumber_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  phoneNumber: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  phoneNumber: String
  grids: GridUpdateManyWithoutAuthorInput
  GridEntries: GridEntryUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  phoneNumber: String
}

input UserUpdateOneRequiredWithoutGridEntriesInput {
  create: UserCreateWithoutGridEntriesInput
  update: UserUpdateWithoutGridEntriesDataInput
  upsert: UserUpsertWithoutGridEntriesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutGridsInput {
  create: UserCreateWithoutGridsInput
  update: UserUpdateWithoutGridsDataInput
  upsert: UserUpsertWithoutGridsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGridEntriesDataInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  phoneNumber: String
  grids: GridUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGridsDataInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  phoneNumber: String
  GridEntries: GridEntryUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutGridEntriesInput {
  update: UserUpdateWithoutGridEntriesDataInput!
  create: UserCreateWithoutGridEntriesInput!
}

input UserUpsertWithoutGridsInput {
  update: UserUpdateWithoutGridsDataInput!
  create: UserCreateWithoutGridsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  grids_every: GridWhereInput
  grids_some: GridWhereInput
  grids_none: GridWhereInput
  GridEntries_every: GridEntryWhereInput
  GridEntries_some: GridEntryWhereInput
  GridEntries_none: GridEntryWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`