// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { Grid, GridEntry, User } from './prisma-client'
import { AuthPayload, SuccessMessage, Context } from '../types'

export type GridEntryType = 'Column' | 'Row'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsGrid {
    id: string
  }

  export interface ArgsUser {
    id?: string | null
    email?: string | null
  }

  export interface ArgsUsers {
    searchString?: string | null
  }

  export type GridsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Grid[] | Promise<Grid[]>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Grid[] | Promise<Grid[]>
      }

  export type GridResolver =
    | ((
        parent: undefined,
        args: ArgsGrid,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Grid | null | Promise<Grid | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsGrid,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Grid | null | Promise<Grid | null>
      }

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>
      }

  export type UsersResolver =
    | ((
        parent: undefined,
        args: ArgsUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>
      }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>
      }

  export interface Type {
    grids:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Grid[] | Promise<Grid[]>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Grid[] | Promise<Grid[]>
        }

    grid:
      | ((
          parent: undefined,
          args: ArgsGrid,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Grid | null | Promise<Grid | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsGrid,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Grid | null | Promise<Grid | null>
        }

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>
        }

    users:
      | ((
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>
        }

    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>
        }
  }
}

export namespace GridResolvers {
  export const defaultResolvers = {
    id: (parent: Grid) => parent.id,
    name: (parent: Grid) => parent.name,
    createdAt: (parent: Grid) => parent.createdAt,
    updatedAt: (parent: Grid) => parent.updatedAt
  }

  export type IdResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type NameResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type EntriesResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<GridEntry | null> | Promise<Array<GridEntry | null>>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<GridEntry | null> | Promise<Array<GridEntry | null>>
      }

  export type AuthorResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type CreatedAtResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UpdatedAtResolver =
    | ((
        parent: Grid,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export interface Type {
    id:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    name:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    entries:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<GridEntry | null> | Promise<Array<GridEntry | null>>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<GridEntry | null> | Promise<Array<GridEntry | null>>
        }

    author:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    createdAt:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    updatedAt:
      | ((
          parent: Grid,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Grid,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }
  }
}

export namespace GridEntryResolvers {
  export const defaultResolvers = {
    id: (parent: GridEntry) => parent.id,
    type: (parent: GridEntry) => parent.type,
    amount: (parent: GridEntry) => parent.amount,
    unit: (parent: GridEntry) => parent.unit
  }

  export type IdResolver =
    | ((
        parent: GridEntry,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type TypeResolver =
    | ((
        parent: GridEntry,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GridEntryType | Promise<GridEntryType>)
    | {
        fragment: string
        resolve: (
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GridEntryType | Promise<GridEntryType>
      }

  export type AmountResolver =
    | ((
        parent: GridEntry,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UnitResolver =
    | ((
        parent: GridEntry,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export interface Type {
    id:
      | ((
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: GridEntry,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    type:
      | ((
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GridEntryType | Promise<GridEntryType>)
      | {
          fragment: string
          resolve: (
            parent: GridEntry,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GridEntryType | Promise<GridEntryType>
        }

    amount:
      | ((
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: GridEntry,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    unit:
      | ((
          parent: GridEntry,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: GridEntry,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    firstName: (parent: User) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: User) =>
      parent.lastName === undefined ? null : parent.lastName,
    username: (parent: User) => parent.username,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    phoneNumber: (parent: User) =>
      parent.phoneNumber === undefined ? null : parent.phoneNumber
  }

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type FirstNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type LastNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type UsernameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type PhoneNumberResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UpdatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type PasswordResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type GridsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Grid | null> | null | Promise<Array<Grid | null> | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Grid | null> | null | Promise<Array<Grid | null> | null>
      }

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    firstName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    lastName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    username:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    phoneNumber:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    updatedAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    password:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    grids:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Grid | null> | null | Promise<Array<Grid | null> | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Grid | null> | null | Promise<Array<Grid | null> | null>
        }
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface ArgsSignup {
    email: string
    password: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
  }

  export interface ArgsLogin {
    email: string
    password: string
  }

  export type SignupResolver =
    | ((
        parent: undefined,
        args: ArgsSignup,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>
      }

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>
      }

  export type LogoutResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => SuccessMessage | null | Promise<SuccessMessage | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SuccessMessage | null | Promise<SuccessMessage | null>
      }

  export interface Type {
    signup:
      | ((
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsSignup,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>
        }

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>
        }

    logout:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SuccessMessage | null | Promise<SuccessMessage | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => SuccessMessage | null | Promise<SuccessMessage | null>
        }
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  }

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export interface Type {
    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }
  }
}

export namespace SuccessMessageResolvers {
  export const defaultResolvers = {
    message: (parent: SuccessMessage) =>
      parent.message === undefined ? null : parent.message
  }

  export type MessageResolver =
    | ((
        parent: SuccessMessage,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: SuccessMessage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export interface Type {
    message:
      | ((
          parent: SuccessMessage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: SuccessMessage,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Grid: GridResolvers.Type
  GridEntry: GridEntryResolvers.Type
  User: UserResolvers.Type
  Mutation: MutationResolvers.Type
  AuthPayload: AuthPayloadResolvers.Type
  SuccessMessage: SuccessMessageResolvers.Type
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {}
}
